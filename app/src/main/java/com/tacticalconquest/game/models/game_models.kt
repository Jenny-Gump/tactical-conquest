package com.tacticalconquest.game.models

import com.tacticalconquest.game.engine.UnitType

/**
 * –¢–∏–ø—ã –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
 */
enum class TerrainType {
    PLAINS,  // –†–∞–≤–Ω–∏–Ω—ã
    HILLS,   // –•–æ–ª–º—ã
    FOREST,  // –õ–µ—Å
    RIVER,   // –†–µ–∫–∞
    CITY     // –ì–æ—Ä–æ–¥
}

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–π–ª–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
 */
data class Tile(
    val x: Int,
    val y: Int,
    val terrain: TerrainType,
    val owner: String = "neutral"  // "player", "ai", "neutral"
)

/**
 * –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
 */
data class Position(
    val x: Int,
    val y: Int
)

/**
 * –ù–∞—á–∞–ª—å–Ω—ã–µ —é–Ω–∏—Ç—ã
 */
data class StartUnit(
    val type: UnitType,
    val count: Int
)

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
 */
data class Level(
    val id: Int,
    val name: String,
    val description: String,
    val mapWidth: Int,
    val mapHeight: Int,
    val tiles: List<Tile>,
    val playerStartPosition: Position,
    val playerStartUnits: List<StartUnit>,
    val enemyStartPosition: Position,
    val enemyStartUnits: List<StartUnit>,
    val victoryConditions: VictoryConditions,
    val rewards: LevelRewards
)

/**
 * –£—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
 */
data class VictoryConditions(
    val captureAllTerritories: Boolean = true,
    val destroyAllEnemies: Boolean = false,
    val captureSpecificHexes: List<Position> = emptyList(),
    val surviveForTurns: Int? = null
)

/**
 * –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
 */
data class LevelRewards(
    val baseGloryPoints: Int,
    val speedBonus: Int = 25,      // –ë–æ–Ω—É—Å –∑–∞ –±—ã—Å—Ç—Ä—É—é –ø–æ–±–µ–¥—É
    val flawlessBonus: Int = 30,   // –ë–æ–Ω—É—Å –∑–∞ –ø–æ–±–µ–¥—É –±–µ–∑ –ø–æ—Ç–µ—Ä—å
    val unlockLevel: Int? = null   // –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è
)

/**
 * –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
 */
data class Achievement(
    val id: String,
    val name: String,
    val description: String,
    val icon: String = "üèÜ",
    var isUnlocked: Boolean = false,
    val gloryPointsReward: Int = 0
)

/**
 * –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
 */
data class LevelProgress(
    val levelId: Int,
    var isUnlocked: Boolean = false,
    var isCompleted: Boolean = false,
    var stars: Int = 0,            // 0-3 –∑–≤–µ–∑–¥—ã
    var bestTime: Int = Int.MAX_VALUE,  // –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –≤ —Ö–æ–¥–∞—Ö
    var totalGloryEarned: Int = 0
)

/**
 * –¢–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ
 */
data class ShopItem(
    val id: String,
    val name: String,
    val description: String,
    val price: String,          // –¶–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "$0.99"
    val gloryPrice: Int? = null,  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞ –≤ –æ—á–∫–∞—Ö —Å–ª–∞–≤—ã
    val type: ShopItemType,
    val icon: String = "üõí",
    var isPurchased: Boolean = false
)

/**
 * –¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
 */
enum class ShopItemType {
    PREMIUM_PACK,
    UNIT_SKIN,
    UI_THEME,
    BOOSTER
}

/**
 * –°–∫–∏–Ω —é–Ω–∏—Ç–∞
 */
data class UnitSkin(
    val id: String,
    val name: String,
    val unitType: UnitType,
    val icon: String,
    val color: String  // Hex color
)

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
 */
data class GameSettings(
    var soundEnabled: Boolean = true,
    var musicEnabled: Boolean = true,
    var vibrationEnabled: Boolean = true,
    var graphicsQuality: GraphicsQuality = GraphicsQuality.MEDIUM,
    var selectedLanguage: String = "ru"
)

/**
 * –ö–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–∏
 */
enum class GraphicsQuality {
    LOW,
    MEDIUM,
    HIGH
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
 */
data class PlayerStats(
    var totalGloryPoints: Int = 0,
    var totalBattles: Int = 0,
    var totalVictories: Int = 0,
    var totalDefeats: Int = 0,
    var unitsCreated: Int = 0,
    var unitsLost: Int = 0,
    var territoriesCaptured: Int = 0,
    var perfectVictories: Int = 0,
    var fastVictories: Int = 0
)

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
 */
data class SavedGameState(
    val levelId: Int,
    val currentTurn: Int,
    val playerUnitsJson: String,    // –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —é–Ω–∏—Ç—ã
    val aiUnitsJson: String,
    val mapStateJson: String,        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
    val playerResources: String,
    val aiResources: String,
    val timestamp: Long = System.currentTimeMillis()
)